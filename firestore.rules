rules_version = '2';
service cloud.firestore {
	function notUpdating(field) {
   return !(field in request.resource.data)
    || resource.data[field] == request.resource.data[field]
  }
  
  function checkUserFieldsValid(){
  	return ('displayName' in request.resource.data &&
    'email' in request.resource.data &&
    'following' in request.resource.data &&
    'picUrl' in request.resource.data &&
    'recipes' in request.resource.data &&
    'shoppingList' in request.resource.data &&
    'time' in request.resource.data &&
    'uid' in request.resource.data &&
    'username' in request.resource.data &&
    'wishlist' in request.resource.data) &&
    request.resource.data.displayName is string &&
    request.resource.data.username is string &&
    request.resource.data.email is string &&
    request.resource.data.uid is string &&
    request.resource.data.displayName.size() < 50 &&
    request.resource.data.username.size() < 20 &&
    request.resource.data.username.size() > 2 &&
    request.resource.data.email.size() < 254 &&
    request.resource.data.email.size() > 0 &&
    request.resource.data.username.lower() == request.resource.data.username;
  }

  // 'aboutme' in request.resource.data &&
  //  request.resource.data.aboutme is string &&
  //  request.resource.data.aboutme.size() < 2000;
  
  match /databases/{database}/documents {
  	match /{document=**} {
    	allow read: if false;
      allow write: if false;
    }
  
    match /recipes/{recipe} {
      allow read, write: if true;
    }

    // A read rule can be divided into get and list rules
    match /users/{user} {
      // Applies to single document read requests
      allow read: if true;
    }

    // A write rule can be divided into create, update, and delete rules
    match /users/{user} {
      // Applies to writes to nonexistent documents
      allow create: if !(exists(/databases/$(database)/documents/usernames/$(request.resource.data.username))) &&
                    request.auth != null &&
                    request.auth.uid != null &&
                    request.auth.uid == request.resource.data.uid &&
                    checkUserFieldsValid();
                    
      // Applies to writes to existing documents
      allow update: if user == request.auth.uid &&
            request.auth.uid == request.resource.data.uid &&
            notUpdating('username') && notUpdating('uid') &&
            (!('time' in request.resource.data)
            || resource.data.time == request.resource.data.time)
            && checkUserFieldsValid();

      // Applies to delete operations
      allow delete: if request.auth != null &&
                        user == request.auth.uid &&
                        request.auth.uid == resource.data.uid;
    }

  // A write rule can be divided into create, update, and delete rules
    match /usernames/{username} {
      allow get: if true;

      allow list: if false;
      // Applies to writes to nonexistent documents
      allow create: if request.auth != null &&             
                    request.auth.uid != null &&
                    request.auth.uid == request.resource.data.uid &&
                    exists(/databases/$(database)/documents/users/$(request.resource.data.uid)) &&
                    (username == get(/databases/$(database)/documents/users/$(request.resource.data.uid))
                      .data.username) &&
                    !(exists(/databases/$(database)/documents/usernames/$(username))) &&
                    request.resource.data.username.lower() == request.resource.data.username &&
                    request.resource.data.username.size() < 20 &&
                    request.resource.data.username.size() > 2;
                    
                    
      // Applies to writes to existing documents
      allow update: if false;

      // Applies to delete operations
      allow delete: if request.auth != null &&
                  request.auth.uid == resource.data.uid;
  	}
  }
}